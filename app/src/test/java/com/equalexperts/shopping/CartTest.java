/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.equalexperts.shopping;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;

import com.equalexperts.shopping.exceptions.CartException;
import com.equalexperts.shopping.exceptions.ProductPriceException;
import java.io.IOException;
import org.json.JSONException;
import org.junit.Test;

public class CartTest {

  public static final double CHEERIOS_PRICE = 8.43;
  private static final double CORNFLAKES_PRICE = 2.52;
  private static final double FROSTIES_PRICE = 4.99;
  double epsilon = 0.000001d;

  @Test
  public void addProductSucceeds() throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 1);
  }


  @Test
  public void addNegativeNumberOfProductsFails() throws IOException {
    var cart = new Cart();
    var exception = assertThrows(CartException.class, () -> {
      cart.addProduct("cheerios", -1);
    });
    assertTrue(exception.getMessage().contains("Quantity must be greater than 0"));

  }

  @Test
  public void getProductTotalSingle() throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    assertEquals(CHEERIOS_PRICE, cart.addProduct("cheerios", 1).getProductTotal("cheerios"),
        epsilon);
  }

  @Test
  public void getProductTotalMultipleSameProduct()
      throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 1);
    cart.addProduct("cheerios", 3);
    cart.addProduct("cheerios", 2);
    assertEquals(CHEERIOS_PRICE * 6, cart.getProductTotal("cheerios"), epsilon);
  }

  @Test
  public void getProductTotalMultipleDifferentProducts()
      throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    assertEquals(CHEERIOS_PRICE * 3, cart.getProductTotal("cheerios"), epsilon);
    assertEquals(FROSTIES_PRICE * 2, cart.getProductTotal("frosties"), epsilon);
    assertEquals(CORNFLAKES_PRICE * 4, cart.getProductTotal("cornflakes"), epsilon);
  }

  @Test
  public void getProductTotalsMultipleDifferentProducts()
      throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    var totals = cart.getProductTotals();

    assertEquals(CHEERIOS_PRICE * 3, totals.get(0).getValue(), epsilon);
    assertEquals(CORNFLAKES_PRICE * 4, totals.get(1).getValue(), epsilon);
    assertEquals(FROSTIES_PRICE * 2, totals.get(2).getValue(), epsilon);
  }

  @Test
  public void getProductCount() throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    assertEquals(3, (long) cart.getProductCount("cheerios"));
  }

  @Test
  public void getProductCountssMultipleDifferentProducts()
      throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    var totals = cart.getProductCounts();

    assertEquals(3, totals.get(0).getValue(), epsilon);
    assertEquals(4, totals.get(1).getValue(), epsilon);
    assertEquals(2, totals.get(2).getValue(), epsilon);
  }

  @Test
  public void getSubtotal() throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    assertEquals(CHEERIOS_PRICE * 3 + FROSTIES_PRICE * 2 + CORNFLAKES_PRICE * 4, cart.getSubtotal(),
        epsilon);
  }

  @Test
  public void getTaxPayable() throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    assertEquals(5.67, cart.getTaxPayable(), epsilon);

  }

  @Test
  public void getTotalPayable() throws IOException, JSONException, InterruptedException {
    var cart = new Cart();
    cart.addProduct("cheerios", 3);
    cart.addProduct("cornflakes", 4);
    cart.addProduct("frosties", 2);
    assertEquals(51.02, cart.getTotalPayable(), epsilon);
  }

  @Test
  public void addNonExistentProductThrows() throws IOException {
    var cart = new Cart();
    var exception = assertThrows(ProductPriceException.class, () -> {
      cart.addProduct("ricepops", 3);
    });
    assertTrue(exception.getMessage().contains("when fetching the product's price"));
  }
}
